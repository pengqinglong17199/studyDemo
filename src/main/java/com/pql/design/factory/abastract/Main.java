package com.pql.design.factory.abastract;

public class Main {

    /**
     * 抽象工厂模式是指 一个创建一系列相关或相互依赖对象的接口，无需指定他们的具体类。应用层不依赖于产品类实例如何被创建，如何被实现等细节；
     *                  强调的是一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复代码。需要提供一个产品类的库，所有的产品
     *                  以相同的接口出现，从而使客户端不依赖于具体实现
     *
     * 抽象工厂首先要了解产品等级结构和产品族
     *         丨横向是一个产品族 纵           丨---------------
     *         丨---------------- 向       具◇丨 □    ○    △
     *         丨 □    ○  丨△丨  是           丨---------------
     *         丨---------------  一       体◇丨 □    ○    △
     *         丨 □    ○  丨△丨  个           丨---------------
     *         丨 □    ○  丨△丨  产       的◇丨 □    ○    △
     *         丨 □    ○  丨△丨  品           丨---------------
     *         丨 □    ○  丨△丨  等       工◇丨 □    ○    △
     *         丨 □    ○  丨△丨  级           丨---------------
     *         丨 □    ○  丨△丨  结       厂◇丨 □    ○    △
     *         丨______________   构           丨______________
     *
     *
     *
     *抽象工厂模式的可以非常完美清晰的描述复杂的产品族以及产品等级结构的关系
     *
     * 抽象工厂模式的缺点
     *  ①.规定了所有可能被创建的产品集合，产品族中扩展性的产品困难，需要修改抽象工厂接口 = 需要调整所有具体工厂 = 不符合开闭原则
     *  ②.增加了系统的抽象性和理解难度
     *
     * 可以配合简单工厂模式创建出对应工厂再进行实例创建
     *
     * */
    public static void main(String[] args) {
        ReportFactory factory = new ShenZhenReportFactory();
        factory.createWorker().report();
        factory.createGroup().report();

        factory = new WuHanReportFactory();
        factory.createWorker().report();
        factory.createGroup().report();

    }
}
