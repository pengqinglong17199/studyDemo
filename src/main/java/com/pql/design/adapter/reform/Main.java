package com.pql.design.adapter.reform;

public class Main {

    /**
     * 适配器模式是指 讲一个类的接口转换成用户期望的另一个接口,使原本接口不兼容的类可以一起工作
     *
     * 适配器模式适用于以下几种业务场景
     *      1. 已结存在的类的方法和需求不匹配(方法结果相同或相似)的情况
     *      2. 适配器模式不是软件初始考虑的设计模式,而是随着软件的发展,由于不同产品,不同厂家造成的功能类似而接口不同的问题的解决方案,有点亡羊补牢的感觉
     *
     * 适配器模式的优点
     *      1. 能提高类的透明性和复用性,现有的类会被复用但不需要改变
     *      2. 目标类和适配器类解耦,可以提高程序的拓展性
     *      3. 在很多业务场景中符合开闭原则
     *
     * 适配器模式的缺点
     *      1. 在适配器代码编写过程中需要进行全面考虑,可能会增加系统的复杂性
     *      2. 增加了代码的阅读难度,降低了代码的可读性,过多的使用适配器会使系统的代码变得凌乱
     *
     * 生活中也有类似的应用场景 例如电源插座转换头,手机充电转换头,显示器转接头等
     *
     * 业务中实际场景  很多系统自己的登录接口 随着业务发展需要开通第三方登录的功能 例如qq登录 微信登录 手机号登录等等 同时保留用户名和密码的登录方式
     * 通过适配器模式 登录后台的处理逻辑不用改动 增加适配器接口 对第三方登录需求进行适配转换到登录功能中 符合代码开闭原则
     *
     * 下面便是一个简单的第三方登录实例
     *
     * */
    public static void main(String[] args) {
        PassportForThirdAdapter passportForThirdAdapter = new PassportForThirdAdapter();
        passportForThirdAdapter.loginForQQ("123");
    }
}
